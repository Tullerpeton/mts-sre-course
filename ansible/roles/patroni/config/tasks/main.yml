---

# Patroni configure
- name: Make sure that conf directory exists
  ansible.builtin.file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: "0750"
  tags: patroni, patroni_conf

- name: Make sure that patroni log directory exists
  ansible.builtin.file:
    path: "{{ patroni_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0750"
  when: patroni_log_destination == 'logfile'
  tags: patroni

- name: Make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"
  tags: patroni

- name: Update conf file "/etc/patroni/patroni.yml"
  ansible.builtin.template:
    src: ../templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: "0640"
  notify: "reload patroni"
  tags: patroni, patroni_conf

- block:
    - name: Update postgresql parameters in DCS
      ansible.builtin.uri:
        url: http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:{{ patroni_restapi_port }}/config
        method: PATCH
        body: '{"postgresql":{"parameters":{"{{ item.option }}":"{{ item.value }}"}}}'
        body_format: json
      loop: "{{ postgresql_parameters }}"
      when: item.value != "null"

    - name: Delete postgresql parameters from DCS
      ansible.builtin.uri:
        url: http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:{{ patroni_restapi_port }}/config
        method: PATCH
        body: '{"postgresql":{"parameters":{"{{ item.option }}":null}}}'
        body_format: json
      loop: "{{ postgresql_parameters }}"
      when: item.value == "null"
  environment:
    no_proxy: "{{ inventory_hostname }}"
  when: is_master | bool
  tags: patroni, patroni_conf

- name: Delete postgresql parameters from "/etc/patroni/patroni.yml"
  ansible.builtin.lineinfile:
    path: /etc/patroni/patroni.yml
    regexp: '^.*{{ item.option }}: {{ item.value }}$'
    state: absent
  loop: "{{ postgresql_parameters }}"
  when: item.value == "null"
  tags: patroni, patroni_conf

# Update pg_hba.conf
- ansible.builtin.import_tasks: pg_hba.yml
  tags: patroni, patroni_conf, pg_hba, pg_hba_generate

# pending_restart
- block:
    - name: "Check if there are any changed parameters that require a restart"
      become_user: postgres
      community.postgresql.postgresql_query:
        login_host: "127.0.0.1"
        login_port: "{{ postgresql_port }}"
        login_user: "{{ patroni_superuser_username }}"
        login_password: "{{ patroni_superuser_password }}"
        login_db: "postgres"
        query: "select name from pg_settings where pending_restart is true"
      register: pending_restart_result

    - name: "Set pg_pending_restart_settings variable"
      ansible.builtin.set_fact:
        pg_pending_restart_settings: "{{ pending_restart_result.query_result }}"

    - name: "Display parameters requiring PostgreSQL restart"
      ansible.builtin.debug:
        msg:
          - "On server {{ ansible_hostname }}, the following parameters have changed and require PostgreSQL to restart:"
          - "{{ pg_pending_restart_settings | map(attribute='name') | list }}"
      when: pg_pending_restart_settings | length > 0
  tags: patroni, patroni_conf
...
