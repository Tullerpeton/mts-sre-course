---
# Configure SSH Key-Based Authentication between cluster nodes

- name: Make sure that the openssh-client package is installed
  become: true
  become_user: root
  ansible.builtin.package:
    name: openssh-client
    state: present
  when: ansible_os_family == "Debian"

- name: Make sure that the openssh-clients package is installed
  become: true
  become_user: root
  ansible.builtin.package:
    name: openssh-clients
    state: present
  when: ansible_os_family == "RedHat"

- name: Make sure the SSH key for user "{{ ssh_key_user }}" exists
  ansible.builtin.user:
    name: "{{ ssh_key_user }}"
    generate_ssh_key: true
    ssh_key_file: .ssh/id_rsa

- name: Fetch public SSH keys from database servers
  ansible.builtin.fetch:
    src: "~{{ ssh_key_user }}/.ssh/id_rsa.pub"
    dest: "files/{{ inventory_hostname }}-id_rsa.pub"
    flat: true
  changed_when: false

- name: Add public SSH keys to authorized_keys
  ansible.posix.authorized_key:
    user: "{{ ssh_key_user }}"
    state: present
    key: "{{ lookup('pipe', 'cat files/*id_rsa.pub') }}"
    exclusive: false

- name: Remove public SSH keys from localhost
  run_once: true
  become: false
  ansible.builtin.file:
    path: files/{{ item }}-id_rsa.pub
    state: absent
  loop: "{{ groups['postgres_cluster'] }}"
  delegate_to: localhost
  changed_when: false

# known_hosts
- name: known_hosts | for each host, scan for its ssh public key
  ansible.builtin.command: "ssh-keyscan -trsa -p {{ ansible_ssh_port | default(22) }} {{ item }}"
  loop: "{{ groups['postgres_cluster'] }}"
  register: ssh_known_host_results
  changed_when: false

- name: known_hosts | for each host, add/update the public key in the "~{{ ssh_key_user }}/.ssh/known_hosts"
  become: true
  become_user: "{{ ssh_key_user }}"
  ansible.builtin.known_hosts:
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
    path: "~{{ ssh_key_user }}/.ssh/known_hosts"
  loop: "{{ ssh_known_host_results.results }}"
  no_log: true  # don't show public keys

...
