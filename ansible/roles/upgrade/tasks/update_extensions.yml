---

- name: "Get list of installed PostgreSQL extensions (database: {{ pg_target_dbname }})"
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
    "select extname from pg_catalog.pg_extension"
  register: pg_installed_extensions
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

- name: "Get list of old PostgreSQL extensions (database: {{ pg_target_dbname }})"
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
    "select extname from pg_catalog.pg_extension e
    join pg_catalog.pg_available_extensions ae on extname = ae.name
    where installed_version <> default_version"
  register: pg_old_extensions
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

# if there are no old extensions
- name: "The extensions are up-to-date (database: {{ pg_target_dbname }})"
  ansible.builtin.debug:
    msg:
      - "The extension versions are up-to-date for the database {{ pg_target_dbname }}"
      - "No update is required."
  when:
    - inventory_hostname in groups['primary']
    - pg_old_extensions.stdout_lines | length < 1

# if pg_stat_cache is not installed
# excluding: 'pg_repack' (is exists), as it requires re-creation to update
- name: "Update old PostgreSQL extensions (database: {{ pg_target_dbname }})"
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
    "ALTER EXTENSION {{ item }} UPDATE"
  ignore_errors: true  # show the error and continue the playbook execution
  loop: "{{ pg_old_extensions.stdout_lines | reject('match', '^pg_repack$') | list }}"
  when:
    - inventory_hostname in groups['primary']
    - pg_old_extensions.stdout_lines | length > 0
    - (not 'pg_stat_kcache' in pg_installed_extensions.stdout_lines)

# if pg_stat_kcache is installed
- block:
    # excluding: 'pg_stat_statements','pg_stat_kcache', because extension pg_stat_kcache depends on it (will be re-created)
    - name: "Update old PostgreSQL extensions (database: {{ pg_target_dbname }})"
      ansible.builtin.command: >-
        psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
        "ALTER EXTENSION {{ item }} UPDATE"
      ignore_errors: true  # show the error and continue the playbook execution
      loop: "{{ pg_old_extensions.stdout_lines | reject('match', '^(pg_repack|pg_stat_statements|pg_stat_kcache)$') | list }}"

    # re-create 'pg_stat_statements' and 'pg_stat_kcache' if an update is required
    - name: "Recreate old pg_stat_statements and pg_stat_kcache extensions to update (database: {{ pg_target_dbname }})"
      ansible.builtin.command: >-
        psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
        "DROP EXTENSION pg_stat_statements CASCADE;
        CREATE EXTENSION pg_stat_statements;
        CREATE EXTENSION pg_stat_kcache"
      ignore_errors: true  # show the error and continue the playbook execution
  when:
    - inventory_hostname in groups['primary']
    - pg_old_extensions.stdout_lines | length > 0
    - ('pg_stat_statements' in pg_old_extensions.stdout_lines or 'pg_stat_kcache' in pg_old_extensions.stdout_lines)
    - ('pg_stat_kcache' in pg_installed_extensions.stdout_lines)

# re-create the 'pg_repack' if it exists and an update is required
- name: "Recreate old pg_repack extension to update (database: {{ pg_target_dbname }})"
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d {{ pg_target_dbname }} -tAXc
    "DROP EXTENSION pg_repack;
    CREATE EXTENSION pg_repack;"
  ignore_errors: true  # show the error and continue the playbook execution
  when:
    - inventory_hostname in groups['primary']
    - (pg_old_extensions.stdout_lines | length > 0 and 'pg_repack' in pg_old_extensions.stdout_lines)

...
