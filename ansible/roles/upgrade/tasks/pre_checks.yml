---

# Stop, if pg_old_version, pg_new_version are not defined
- name: Make sure that the required variables are specified
  run_once: true
  ansible.builtin.debug:
    msg:
      - "One or more required variables have empty values."
      - "Please specify a value for the variables: pg_old_version, pg_new_version"
  failed_when: pg_old_version | length < 1 or pg_new_version | length < 1
  when: pg_old_version | length < 1 or pg_new_version | length < 1

# Stop, if the directories of the old and new versions are the same
- name: "Make sure that the old and new data and config directories do not match"
  run_once: true
  ansible.builtin.debug:
    msg:
      - "pg_old_datadir and pg_new_datadir, pg_old_confdir and pg_new_confdir must not be the same."
      - "Please check your configuration (vars/upgrade.yml)"
  failed_when: (pg_old_datadir == pg_new_datadir) or (pg_old_confdir == pg_new_confdir)
  when: (pg_old_datadir == pg_new_datadir) or (pg_old_confdir == pg_new_confdir)

# required to perform the dcs_remove_cluster.yml
- name: '[Pre-Check] Make sure the ansible required Python library is installed'
  ansible.builtin.pip:
    name: "{{ item }}"
    state: present
    executable: pip3
    extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
    umask: "0022"
  loop:
    - pexpect
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: '[Pre-Check] Test PostgreSQL database access using a unix socket'
  ansible.builtin.command: >
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc 'select 1'
  register: socket_access_result
  changed_when: false
  failed_when: "socket_access_result.rc != 0 and 'no pg_hba.conf entry' not in socket_access_result.stderr"

# if 'no pg_hba.conf entry'
- block:
    # Add a temporary local access rule for pg_upgrade to allow the upgrade process to proceed without authentication issues.
    # This is necessary to ensure a smooth upgrade process and will be removed after the upgrade is complete.
    - name: Add temporary local access rule (during the upgrade)
      ansible.builtin.blockinfile:
        path: "{{ pg_old_confdir }}/pg_hba.conf"
        marker: "# {mark} ANSIBLE TEMPORARY pg_upgrade RULE"
        insertbefore: BOF
        content: "local all all trust"

    - name: Update the PostgreSQL configuration
      ansible.builtin.command: "{{ pg_old_bindir }}/pg_ctl reload -D {{ pg_old_datadir }}"
  when:
    - socket_access_result.stderr is defined
    - "'no pg_hba.conf entry' in socket_access_result.stderr"

- name: '[Pre-Check] Check the current version of PostgreSQL'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select setting::integer/10000 from pg_settings where name = 'server_version_num'"
  register: pg_current_version
  changed_when: false
  when:
    - inventory_hostname in groups['primary']
    - pg_old_version is version('10', '>=')

# for compatibility with Postgres 9.x
- name: '[Pre-Check] Check the current version of PostgreSQL'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select substring(setting from '^[0-9]+\.[0-9]+') from pg_settings where name = 'server_version'"
  register: pg_current_version_9x
  changed_when: false
  when:
    - inventory_hostname in groups['primary']
    - pg_old_version is version('10', '<')

- name: "Set variable 'current_pg_version'"
  ansible.builtin.set_fact:
    current_pg_version: "{{ pg_current_version.stdout if pg_old_version is version('10', '>=') else pg_current_version_9x.stdout }}"
  when:
    - inventory_hostname in groups['primary']

# Stop, if the current version does not match pg_old_version
- name: "Pre-Check error. An incorrect version of PostgreSQL may have been specified"
  ansible.builtin.fail:
    msg:
      - "The current version of PostgreSQL is {{ current_pg_version }}"
      - "Make sure that you have specified the correct version in the pg_old_version variable."
  when:
    - inventory_hostname in groups['primary']
    - current_pg_version is not version (pg_old_version, '==')

# Stop, if the current version greater than or equal to pg_new_version
- name: "Pre-Check error. An incorrect target version of PostgreSQL may have been specified"
  ansible.builtin.fail:
    msg:
      - "The current version of PostgreSQL is {{ current_pg_version }}, no upgrade is needed."
      - "Or, make sure that you have specified the correct version in the pg_new_version variable."
  when:
    - inventory_hostname in groups['primary']
    - current_pg_version is version (pg_new_version, '>=')

# This check is necessary to avoid the risk of deleting the current data directory
# the current directory must not be equal to the path specified in the pg_new_datadir variable
# which will later be cleaned up before executing initdb for a new version of PostgreSQL
- name: '[Pre-Check] Ensure new data directory is different from the current one'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "show data_directory"
  changed_when: false
  register: pg_current_datadir
  when:
    - inventory_hostname in groups['primary']

# Stop, if the current data directory is the same as pg_new_datadir
- name: "Pre-Check error. The current data directory is the same as new data directory"
  ansible.builtin.fail:
    msg:
      - "The new data directory ({{ pg_new_datadir }}) must be different from the current one ({{ pg_current_datadir.stdout | trim }})"
  when:
    - inventory_hostname in groups['primary']
    - pg_new_datadir == pg_current_datadir.stdout | trim

# Stop, if the current WAL directory is the same as pg_new_wal_dir
- name: "Pre-Check error. The current WAL directory is the same as new WAL directory"
  ansible.builtin.fail:
    msg:
      - "The new WAL directory ({{ pg_new_wal_dir }}) must be different from the current one ({{ postgresql_wal_dir }})"
      - "Please specify a different path for the 'pg_new_wal_dir' variable."
  when:
    - inventory_hostname in groups['primary']
    - pg_new_wal_dir | length > 0 and pg_new_wal_dir == postgresql_wal_dir

- name: '[Pre-Check] Make sure that physical replication is active'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select count(*) from pg_stat_replication
     where application_name != 'pg_basebackup'"
  register: pg_replication_state
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

# Stop, if there are no active replicas
- name: "Pre-Check error. Print physical replication state"
  ansible.builtin.fail:
    msg: "There are no active replica servers (pg_stat_replication returned 0 entries)."
  when:
    - inventory_hostname in groups['primary']
    - pg_replication_state.stdout | int == 0

- name: '[Pre-Check] Make sure there is no high replication lag (more than {{ max_replication_lag_bytes | human_readable }})'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn) as pg_lag_bytes
      from pg_stat_replication
      order by pg_lag_bytes desc limit 1"
  register: pg_lag_bytes
  changed_when: false
  failed_when: false
  until: pg_lag_bytes.stdout|int < max_replication_lag_bytes|int
  retries: 30 # 1 minute
  delay: 5
  when:
    - inventory_hostname in groups['primary']
    - pg_old_version is version('10', '>=')

# Stop, if replication lag is high
- name: "Pre-Check error. High replication lag"
  ansible.builtin.fail:
    msg:
      - "High replication lag ({{ pg_lag_bytes.stdout | int | human_readable }}) on the Patroni Cluster"
      - "Please try again later."
  when:
    - pg_lag_bytes.stdout is defined
    - pg_lag_bytes.stdout|int >= max_replication_lag_bytes|int

# for compatibility with Postgres 9.x
- name: '[Pre-Check] Make sure there is no high replication lag (more than {{ max_replication_lag_bytes | human_readable }})'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select pg_xlog_location_diff(pg_current_xlog_location(),replay_location) as pg_lag_bytes
      from pg_stat_replication
      order by pg_lag_bytes desc limit 1"
  register: pg_lag_bytes_9x
  changed_when: false
  failed_when: false
  until: pg_lag_bytes_9x.stdout|int < max_replication_lag_bytes|int
  retries: 30 # 1 minute
  delay: 5
  when:
    - inventory_hostname in groups['primary']
    - pg_old_version is version('10', '<')

# Stop, if replication lag is high (for 9x)
- name: "Pre-Check error. High replication lag"
  ansible.builtin.fail:
    msg:
      - "High replication lag ({{ pg_lag_bytes_9x.stdout | int | human_readable }}) on the Patroni Cluster"
      - "Please try again later."
  when:
    - pg_lag_bytes_9x.stdout is defined
    - pg_lag_bytes_9x.stdout|int >= max_replication_lag_bytes|int

- name: '[Pre-Check] Make sure there are no long-running transactions (more than {{ max_transaction_sec }} seconds)'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select pid, usename, client_addr, clock_timestamp() - xact_start as xact_age,
      state, wait_event_type ||':'|| wait_event as wait_events,
      left(regexp_replace(query, E'[ \\t\\n\\r]+', ' ', 'g'),100) as query
      from pg_stat_activity
      where clock_timestamp() - xact_start > '{{ max_transaction_sec }} seconds'::interval
      and backend_type = 'client backend' and pid <> pg_backend_pid()
      order by xact_age desc limit 10"
  register: pg_long_transactions
  changed_when: false
  failed_when: false
  until: pg_long_transactions.stdout | length < 1
  retries: 30 # 1 minute
  delay: 2
  when: pg_old_version is version('10', '>=')

# Stop, if long-running transactions detected
- block:
    - name: "Print long-running (>{{ max_transaction_sec }}s) transactions"
      ansible.builtin.debug:
        msg: "{{ pg_long_transactions.stdout_lines }}"

    - name: "Pre-Check error. Long-running transactions detected"
      ansible.builtin.fail:
        msg: long-running transactions detected (more than {{ max_transaction_sec }} seconds), please try again later.
      run_once: true
  when:
    - pg_long_transactions.stdout is defined
    - pg_long_transactions.stdout | length > 0

# for compatibility with Postgres 9.x
- name: '[Pre-Check] Make sure there are no long-running transactions (more than {{ max_transaction_sec }} seconds)'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select pid, usename, client_addr, clock_timestamp() - xact_start as xact_age,
      state, left(regexp_replace(query, E'[ \\t\\n\\r]+', ' ', 'g'),100) as query
      from pg_stat_activity
      where clock_timestamp() - xact_start > '{{ max_transaction_sec }} seconds'::interval
      order by xact_age desc limit 10"
  register: pg_long_transactions_9x
  changed_when: false
  failed_when: false
  until: pg_long_transactions_9x.stdout | length < 1
  retries: 30 # 1 minute
  delay: 2
  when: pg_old_version is version('10', '<')

# Stop, if long-running transactions detected (for 9x)
- block:
    - name: "Print long-running (>{{ max_transaction_sec }}s) transactions"
      ansible.builtin.debug:
        msg: "{{ pg_long_transactions_9x.stdout_lines }}"

    - name: "Pre-Check error. Long-running transactions detected"
      ansible.builtin.fail:
        msg: long-running transactions detected (more than {{ max_transaction_sec }} seconds), please try again later.
      run_once: true
  when:
    - pg_long_transactions_9x.stdout is defined
    - pg_long_transactions_9x.stdout | length > 0

# SSH Keys (required for upgrade replicas with rsync)
- name: '[Pre-Check] Make sure that SSH key-based authentication is configured between cluster nodes'
  ansible.builtin.include_tasks: ssh-keys.yml
  vars:
    ssh_key_user: postgres

# Rsync Checks
- name: '[Pre-Check] Make sure that the rsync package are installed'
  become: true
  become_user: root
  ansible.builtin.package:
    name: rsync
    state: present

- name: '[Pre-Check] Rsync Checks: create testrsync file on Primary'
  become: true
  become_user: postgres
  ansible.builtin.file:
    path: /tmp/testrsync
    state: touch
  when:
    - inventory_hostname in groups['primary']

- name: '[Pre-Check] Rsync Checks: test rsync and ssh key access'
  become: true
  become_user: postgres
  ansible.builtin.shell: >
    rsync -e "ssh -o StrictHostKeyChecking=no" --archive --delete --hard-links --size-only --no-inc-recursive --omit-dir-times
    /tmp/testrsync {{ item }}:/tmp/
  args:
    executable: /bin/bash
  loop: "{{ groups.secondary | list }}"
  when:
    - inventory_hostname in groups['primary']

- name: "[Pre-Check] Cleanup testrsync file"
  become: true
  become_user: postgres
  ansible.builtin.file:
    path: /tmp/testrsync
    state: absent

# Tablespaces
- name: '[Pre-Check] Check if PostgreSQL tablespaces exist'
  ansible.builtin.command: >-
    psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
    "select pg_tablespace_location(oid) as tablespace_location
      from pg_tablespace
      where spcname not in ('pg_default','pg_global')"
  register: tablespace_location
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

- name: "Print tablespace location"
  ansible.builtin.debug:
    var: tablespace_location.stdout_lines
  when:
    - inventory_hostname in groups['primary']
    - tablespace_location.stdout_lines | length > 0

# PgBouncer (if 'pgbouncer_pool_pause' is 'true')
# test access via localhost to be able to perform 'PAUSE' command
- name: '[Pre-Check] Test PgBouncer access via localhost'
  ansible.builtin.command: >
    psql -h localhost -p {{ pgbouncer_listen_port }} -U {{ patroni_superuser_username }} -d pgbouncer -tAXc "SHOW POOLS"
  changed_when: false
  when:
    - pgbouncer_install | bool
    - pgbouncer_pool_pause | bool

# Check the VIP address
- name: Make sure that the cluster ip address (VIP) "{{ cluster_vip }}" is running
  ansible.builtin.wait_for:
    host: "{{ cluster_vip }}"
    port: "{{ target_port }}"
    state: started
    timeout: 3
    delay: 2
  vars:
    target_port: >-
      {{ pgbouncer_listen_port if pgbouncer_install | bool
      else (ansible_ssh_port | default(22)) }}
  when:
    - cluster_vip | length > 0

...
