---

- name: Start Patroni service on the Cluster Leader
  become: true
  become_user: root
  ansible.builtin.service:
    name: patroni
    state: started
  when:
    - inventory_hostname in groups['primary']

- name: Wait for Patroni port "{{ patroni_restapi_port }}" to become open on the host
  ansible.builtin.wait_for:
    port: '{{ patroni_restapi_port }}'
    host: '{{ inventory_hostname }}'
    state: started
    timeout: "{{ (pg_start_stop_timeout | int) // 2 }}"
    delay: 2
  when:
    - inventory_hostname in groups['primary']

- name: Check Patroni is healthy on the Leader
  ansible.builtin.uri:
    url: http://{{ inventory_hostname }}:{{ patroni_restapi_port }}/leader
    status_code: 200
  register: patroni_leader_result
  until: patroni_leader_result.status == 200
  retries: "{{ (pg_start_stop_timeout | int) // 2 }}"
  delay: 2
  when:
    - inventory_hostname in groups['primary']

# if 'pgbouncer_install' is 'true' and 'pgbouncer_pool_pause' is 'true'
- name: Perform RESUME PgBouncer pools on the Leader
  ansible.builtin.include_tasks: pgbouncer_resume.yml
  when:
    - inventory_hostname in groups['primary']
    - hostvars[groups['primary'][0]].pgbouncer_pool_pause_result is defined
    - hostvars[groups['primary'][0]].pgbouncer_pool_pause_result is succeeded

- name: Start Patroni service on the Cluster Replica
  become: true
  become_user: root
  ansible.builtin.service:
    name: patroni
    state: started
  when:
    - inventory_hostname in groups['secondary']

- name: Wait for Patroni port "{{ patroni_restapi_port }}" to become open on the host
  ansible.builtin.wait_for:
    port: '{{ patroni_restapi_port }}'
    host: '{{ inventory_hostname }}'
    state: started
    timeout: "{{ (pg_start_stop_timeout | int) // 2 }}"
    delay: 2
  when:
    - inventory_hostname in groups['secondary']

- name: Check Patroni is healthy on the Replica
  ansible.builtin.uri:
    url: http://{{ inventory_hostname }}:{{ patroni_restapi_port }}/health
    status_code: 200
  register: patroni_replica_result
  until: patroni_replica_result.status == 200
  retries: "{{ (pg_start_stop_timeout | int) // 2 }}"
  delay: 2
  when:
    - inventory_hostname in groups['secondary']

# if 'pgbouncer_install' is 'true' and 'pgbouncer_pool_pause' is 'true'
- name: Perform RESUME PgBouncer pools on the Replica
  ansible.builtin.include_tasks: pgbouncer_resume.yml
  when:
    - inventory_hostname in groups['secondary']
    - hostvars[groups['primary'][0]].pgbouncer_pool_pause_result is defined
    - hostvars[groups['primary'][0]].pgbouncer_pool_pause_result is succeeded

- name: Check PostgreSQL is started and accepting connections
  ansible.builtin.command: "{{ pg_new_bindir }}/pg_isready -p {{ postgresql_port }}"
  register: pg_isready_result
  until: pg_isready_result.rc == 0
  retries: 300  # max duration 10 minutes
  delay: 2
  changed_when: false

...
